{"version":3,"sources":["Homepage.js","index.js"],"names":["pdfjs","GlobalWorkerOptions","workerSrc","version","console","log","mergeWebsite","Homepage","props","state","handleUpload","bind","mergePDFs","event","a","fileBuffers","target","files","file","Uint8Array","arrayBuffer","push","this","setState","map","uintarray","Array","from","fileUrls","URL","createObjectURL","fetch","method","headers","body","JSON","stringify","urls","res","json","mergedPdf","mergedPdfBuffer","data","split","buffer","mergedPdfFile","File","type","mergedPdfUrl","mergedUrl","className","src","htmlFor","name","id","accept","onChange","multiple","onClick","url","i","pageNumber","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"whBAIAA,IAAMC,oBAAoBC,UAA1B,kDAAiFF,IAAMG,QAAvF,kBAEAC,QAAQC,IAAIC,K,IAsEGC,E,kDAnEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,GAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBANA,E,uFASnB,WAAmBE,GAAnB,qBAAAC,EAAA,sDACQC,EAAc,GADtB,cAEqBF,EAAMG,OAAOC,OAFlC,gEAEaC,EAFb,aAGIH,EAHJ,KAGyBI,WAHzB,UAG0CD,EAAKE,cAH/C,6CAGgBC,KAHhB,+JAMEC,KAAKC,SAAS,CACZR,YAAaA,EAAYS,KAAI,SAAAC,GAAS,OAAIC,MAAMC,KAAKF,MACrDG,SAAUF,MAAMC,KAAKd,EAAMG,OAAOC,OAAOO,KAAI,SAAAN,GAAI,OAAIW,IAAIC,gBAAgBZ,QAR7E,gE,qHAYA,oCAAAJ,EAAA,sEACoBiB,MAAMzB,IAAc,CACpC0B,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,KAAMf,KAAKb,MAAMM,gBAN5C,cACQuB,EADR,gBAS0BA,EAAIC,OAT9B,OASQC,EATR,OAUQC,EAAkB,IAAItB,WAAWqB,EAAUE,KAAKC,MAAM,MAAMC,OAC5DC,EAAgB,IAAIC,KAAK,CAACL,GAAkB,aAAc,CAAEM,KAAM,oBAClEC,EAAenB,IAAIC,gBAAgBe,GAEzCvB,KAAKC,SAAS,CACZ0B,UAAWD,IAff,iD,0EAmBA,WACE,OACE,sBAAKE,UAAU,YAAf,UACE,qBAAKA,UAAU,YAAf,SACG5B,KAAKb,MAAMwC,WAAa,uBAAOE,IAAK7B,KAAKb,MAAMwC,UAAWC,UAAU,eAEvE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,UAAf,UACE,uBAAOE,QAAQ,OAAOF,UAAU,SAAhC,mCACA,uBAAOH,KAAK,OAAOM,KAAK,OAAOC,GAAG,OAAOC,OAAO,kBAAkBC,SAAUlC,KAAKZ,aAAc+C,UAAQ,IACvG,wBAAQP,UAAU,SAASI,GAAG,cAAcI,QAASpC,KAAKV,UAA1D,sBAEF,qBAAKsC,UAAU,aAAf,SACG5B,KAAKb,MAAMmB,UAAYN,KAAKb,MAAMmB,SAASJ,KAAI,SAACmC,EAAKC,GACpD,OACE,cAAC,IAAD,CAAU1C,KAAMyC,EAAhB,SACE,cAAC,IAAD,CAAME,WAAY,KADMD,kB,GAxDnBE,IAAMC,WCH7BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cbc77b66.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Homepage.css\";\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport { mergeWebsite } from \"./config.json\";\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nconsole.log(mergeWebsite);\n\nclass Homepage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n\n    this.handleUpload = this.handleUpload.bind(this);\n    this.mergePDFs = this.mergePDFs.bind(this);\n  }\n\n  async handleUpload(event) {\n    const fileBuffers = [];\n    for (const file of event.target.files) {\n      fileBuffers.push(new Uint8Array(await file.arrayBuffer()));\n    }\n\n    this.setState({\n      fileBuffers: fileBuffers.map(uintarray => Array.from(uintarray)),\n      fileUrls: Array.from(event.target.files).map(file => URL.createObjectURL(file))\n    });\n  }\n\n  async mergePDFs() {\n    const res = await fetch(mergeWebsite, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ urls: this.state.fileBuffers })\n    });\n\n    const mergedPdf = await res.json();\n    const mergedPdfBuffer = new Uint8Array(mergedPdf.data.split(\",\")).buffer;\n    const mergedPdfFile = new File([mergedPdfBuffer], \"merged.pdf\", { type: \"application/pdf\" })\n    const mergedPdfUrl = URL.createObjectURL(mergedPdfFile);\n\n    this.setState({\n      mergedUrl: mergedPdfUrl\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"pdfMerged\">\n          {this.state.mergedUrl && <embed src={this.state.mergedUrl} className=\"pdfEmbed\" />}\n        </div>\n        <div className=\"pdfViewer\">\n          <div className=\"buttons\">\n            <label htmlFor=\"pdf1\" className=\"upload\">Upload files to merge</label>\n            <input type=\"file\" name=\"pdf1\" id=\"pdf1\" accept=\"application/pdf\" onChange={this.handleUpload} multiple />\n            <button className=\"upload\" id=\"mergeButton\" onClick={this.mergePDFs}>Merge</button>\n          </div>\n          <div className=\"pdfPreview\">\n            {this.state.fileUrls && this.state.fileUrls.map((url, i) => {\n              return (\n                <Document file={url} key={i}>\n                  <Page pageNumber={1} />\n                </Document>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Homepage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Homepage from './Homepage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Homepage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}